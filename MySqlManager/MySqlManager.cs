using System;
using System.Resources;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

namespace MySqlManager
{
    /// <summary>
    /// The single class in the MySQL Manager module.  It handles all of the direct communication with the MySQL database and sends back data
    /// in the form of MySQL objects generated by the MySQL .NET connectors.  It uses a static instance of a class and an private constructor
    /// to enforce Singleton architecture.  The Singleton style architecure ensures that the application only has one instance of the connection
    /// per application.
    /// </summary>
    public sealed class MySqlManager
    {
        // In a live implementation, the connectionString would be read from an external file to allow for
        // custom MySQL database server, username, password, and port.
        private String connectionString = "server=localhost;user=root;password=root;database=pcs;port=3306";

        private MySqlConnection conn;

        // The single instance of the MySqlManger class that can only be 
        // accessed by other modules through the 'Instance' property.
        private static MySqlManager instance = null;

        /// <summary>
        /// Private constructure used to create the public stati
        /// </summary>
        private MySqlManager()
        {
            //System.Resources.ResourceManager rm = new System.Resources.ResourceManager("items", System.Reflection.Assembly.GetExecutingAssembly());
            conn = new MySqlConnection(connectionString);
            try
            {
                conn.Open();
            }
            catch (MySqlException ex)
            {
                Console.WriteLine(ex.Message);
                //System.Windows.Forms.Application.Exit();
            }
        }

        /// <summary>
        /// This property is used to get the private MySqlManager 'instance' if 
        /// 'instance' hasn't been instatiated yet, it instantiates thvariable 
        /// using the private constructor.
        /// </summary>
        public static MySqlManager Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new MySqlManager();
                }
                return instance;
            }
        }

        /// <summary>
        /// Performs the query given.  The query is assumed to a standard
        /// MySQL SELECT query or something similiar that returns a list of rows.
        /// </summary>
        /// <param name="query">A String with proper MySQL syntax</param>
        /// <returns>
        /// A MySqlDataReader object that contains all of the
        /// data that was returned from the query.
        /// </returns>
        public MySqlDataReader ExecuteReader(String query)
        {
            MySqlCommand cmd = new MySqlCommand(query, conn);

            try
            {
                MySqlDataReader rdr = cmd.ExecuteReader();
                return rdr;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine(ex.Message);
                return null;
            }
        }

        /// <summary>
        /// Performs the MySQL script given.  This function is used for
        /// MySQL commands that don't fetch data from the server, rather
        /// commands such as INSERT, UPDATE, REMOVE.
        /// </summary>
        /// <param name="script">A String with proper MySQL syntax</param>
        /// <returns>True if the command was issued successfully, false otherwise.</returns>
        public bool ExecuteNonQuery(String script)
        {
            MySqlCommand cmd = new MySqlCommand(script, conn);

            try
            {
                int i = cmd.ExecuteNonQuery();
                return true;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }

        /// <summary>
        /// Performs the MySQL query given.  This is used to check if somethign exists
        /// or return the count of something.  It is assumed that the MySQL database will
        /// return one item (a table with one column and one row).
        /// </summary>
        /// <param name="query">A String with proper MySQL syntax</param>
        /// <returns>
        /// An Object that contains the data returned. If the application expects an int,
        /// the calling function must cast it as such.
        /// </returns>
        public Object ExecuteScalar(String query)
        {
            MySqlCommand cmd = new MySqlCommand(query, conn);

            try
            {
                Object returnVal = cmd.ExecuteScalar();
                return returnVal;
            }
            catch (MySqlException ex)
            {
                Console.WriteLine(ex.Message);
                return null;
            }
        }
    }
}
